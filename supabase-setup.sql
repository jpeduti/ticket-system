-- Script para configurar las tablas del sistema de tickets en Supabase

-- Crear tabla de clientes
CREATE TABLE IF NOT EXISTS public.clients (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(50),
    company VARCHAR(255),
    address TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Crear tabla de tickets
CREATE TABLE IF NOT EXISTS public.tickets (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'open' CHECK (status IN ('open', 'in_progress', 'closed')),
    priority VARCHAR(50) NOT NULL DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),
    client_id BIGINT NOT NULL REFERENCES public.clients(id) ON DELETE CASCADE,
    assigned_to UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Crear índices para mejorar el rendimiento
CREATE INDEX IF NOT EXISTS idx_clients_email ON public.clients(email);
CREATE INDEX IF NOT EXISTS idx_tickets_client_id ON public.tickets(client_id);
CREATE INDEX IF NOT EXISTS idx_tickets_status ON public.tickets(status);
CREATE INDEX IF NOT EXISTS idx_tickets_priority ON public.tickets(priority);
CREATE INDEX IF NOT EXISTS idx_tickets_assigned_to ON public.tickets(assigned_to);
CREATE INDEX IF NOT EXISTS idx_tickets_created_at ON public.tickets(created_at);

-- Crear función para actualizar updated_at automáticamente
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Crear triggers para actualizar updated_at
CREATE TRIGGER handle_updated_at_clients
    BEFORE UPDATE ON public.clients
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

CREATE TRIGGER handle_updated_at_tickets
    BEFORE UPDATE ON public.tickets
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

-- Configurar Row Level Security (RLS)
ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tickets ENABLE ROW LEVEL SECURITY;

-- Políticas de seguridad para clientes
-- Los usuarios autenticados pueden ver todos los clientes
CREATE POLICY "Users can view all clients" ON public.clients
    FOR SELECT USING (auth.role() = 'authenticated');

-- Los usuarios autenticados pueden insertar clientes
CREATE POLICY "Users can insert clients" ON public.clients
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Los usuarios autenticados pueden actualizar clientes
CREATE POLICY "Users can update clients" ON public.clients
    FOR UPDATE USING (auth.role() = 'authenticated');

-- Los usuarios autenticados pueden eliminar clientes
CREATE POLICY "Users can delete clients" ON public.clients
    FOR DELETE USING (auth.role() = 'authenticated');

-- Políticas de seguridad para tickets
-- Los usuarios autenticados pueden ver todos los tickets
CREATE POLICY "Users can view all tickets" ON public.tickets
    FOR SELECT USING (auth.role() = 'authenticated');

-- Los usuarios autenticados pueden insertar tickets
CREATE POLICY "Users can insert tickets" ON public.tickets
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Los usuarios autenticados pueden actualizar tickets
CREATE POLICY "Users can update tickets" ON public.tickets
    FOR UPDATE USING (auth.role() = 'authenticated');

-- Los usuarios autenticados pueden eliminar tickets
CREATE POLICY "Users can delete tickets" ON public.tickets
    FOR DELETE USING (auth.role() = 'authenticated');

-- Insertar datos de ejemplo (opcional)
INSERT INTO public.clients (name, email, phone, company, address) VALUES
    ('Juan Pérez', 'juan.perez@email.com', '+34 123 456 789', 'Empresa A', 'Calle Principal 123, Madrid'),
    ('María García', 'maria.garcia@email.com', '+34 987 654 321', 'Empresa B', 'Avenida Central 456, Barcelona'),
    ('Carlos López', 'carlos.lopez@email.com', '+34 555 123 456', 'Freelancer', 'Plaza Mayor 789, Valencia')
ON CONFLICT (email) DO NOTHING;

-- Insertar tickets de ejemplo (opcional)
-- Nota: Necesitarás ajustar client_id según los IDs generados
INSERT INTO public.tickets (title, description, status, priority, client_id) VALUES
    ('Problema con el sistema de facturación', 'El sistema no genera facturas correctamente desde ayer', 'open', 'high', 1),
    ('Solicitud de nueva funcionalidad', 'Necesitamos agregar un reporte de ventas mensuales', 'in_progress', 'medium', 2),
    ('Error en página web', 'La página de contacto no envía emails', 'open', 'low', 3),
    ('Actualización de software', 'Necesitamos actualizar el sistema a la última versión', 'closed', 'medium', 1)
ON CONFLICT DO NOTHING;

-- Comentarios útiles:
-- 1. Ejecuta este script en el SQL Editor de Supabase
-- 2. Asegúrate de tener habilitada la autenticación en tu proyecto
-- 3. Los tickets se relacionan con usuarios a través de auth.users (tabla de Supabase)
-- 4. Todas las tablas tienen RLS habilitado para seguridad
-- 5. Los datos de ejemplo son opcionales, puedes eliminarlos si no los necesitas 